#include<bits/stdc++.h>
#define ll long long
using namespace std;
vector<ll> prime;
bool t[1000005];
void seive()
{
    t[0] = t[1] = 1;
    prime.push_back(2);
    for(int i=4; i<=1000000; i+=2) t[i]=1;
    for(int i=3; i<=1000000; i+=2)
    {
        if(t[i]==0){
            prime.push_back(i);
            if(i<=1000){
                for(int j=i*i; j<=1000000; j+=i+i){
                    t[j] = 1;
                }
            }
        }
    }
}
int main(){
    ll l, r, i, j, k;
    seive();
    while(cin>>l>>r){
        vector<ll>arr;
        bool check[r-l+10] = {0};
        for(i = 0; prime[i]*prime[i]<=r; i++){
            j = l/prime[i];
            j *= prime[i];
            if(j<l) j+=prime[i];
            if(j<1000000){
                if(t[j]==0) arr.push_back(j);
            }
            for(k = j; k<=r; k+=prime[i])
                check[k-l] = 1;
        }
        if(l==1) check[0]=1;
        for(i = l; i<=r; i++){
            if(check[i-l]==0) arr.push_back(i);
        }
        ll limit = arr.size();
        if(limit<2) {
            printf("There are no adjacent primes.\n");
            continue;
        }
        ll m1, m2, M1, M2, mx, mn;
        m1 = M1 = arr[0];
        m2 = M2 = arr[1];
        mn = mx = arr[1]-arr[0];
        for(i = 0; i<limit-1; i++){
            if(mx<arr[i+1]-arr[i]) m1=arr[i], m2=arr[i+1], mx = m2-m1;
            if(mn>arr[i+1]-arr[i]) M1=arr[i], M2=arr[i+1], mn = M2-M1;
        }
        printf("%lld,%lld are closest, %lld,%lld are most distant.\n", M1, M2, m1, m2);
    }
}
